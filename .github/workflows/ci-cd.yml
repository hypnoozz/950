name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Node.js 环境和缓存
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # 安装前端依赖（解决 peer deps 冲突）
      - name: Install frontend dependencies with legacy peer deps
        run: |
          cd frontend
          npm install --legacy-peer-deps

      # 前端安全审计
      - name: Audit frontend dependencies
        run: |
          cd frontend
          npm audit --audit-level=moderate || true

      # 前端测试
      - name: Run frontend tests
        run: |
          cd frontend
          npm test -- --watchAll=false

      # 构建前端，CI=true 输出详细日志
      - name: Build frontend
        run: |
          cd frontend
          CI=true npm run build

      # Python 环境和缓存
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.9'

      - name: Cache Python packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # 安装后端依赖
      - name: Install Python dependencies
        run: |
          cd backend
          pip install -r requirements.txt

      # 后端安全审计（需要先安装 bandit）
      - name: Install bandit
        run: pip install bandit

      - name: Audit backend code
        run: |
          cd backend
          bandit -r . || true

      # 运行后端测试
      - name: Run backend tests
        run: |
          cd backend
          python manage.py test

      # 运行数据库迁移
      - name: Run Django migrations
        run: |
          cd backend
          python manage.py migrate

      # 收集静态文件
      - name: Collect static files
        run: |
          cd backend
          python manage.py collectstatic --noinput

      # 部署（示例，请根据你实际服务器信息替换）
      - name: Deploy to server
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          echo "$SSH_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          scp -i private_key.pem -r frontend/build/* your-user@your-server:/path/to/deploy/frontend/
          scp -i private_key.pem -r backend/static/* your-user@your-server:/path/to/deploy/backend/static/
          rm private_key.pem

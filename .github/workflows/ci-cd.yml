name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v3

      # Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      # Cache Node.js dependencies for faster installs
      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Install frontend dependencies with legacy peer deps to avoid conflicts
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm install --legacy-peer-deps

      # Build the frontend project
      - name: Build frontend
        run: |
          cd frontend
          CI=false npm run build

      # Setup Python environment
      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.9'

      # Cache Python pip packages for faster installs
      - name: Cache Python packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # Install backend dependencies
      - name: Install backend dependencies
        run: |
          cd backend
          pip install -r requirements.txt

      # Run Django migrations to update the database schema
      - name: Run Django migrations
        run: |
          cd backend
          python manage.py migrate

      # Collect static files (optional if you serve them in production)
      - name: Collect static files
        run: |
          cd backend
          python manage.py collectstatic --noinput

      # (Optional) Run backend tests if you have any
      - name: Run backend tests
        run: |
          cd backend
          python manage.py test

      # (Optional) Run frontend tests if you have any
      - name: Run frontend tests
        run: |
          cd frontend
          npm run test -- --watchAll=false

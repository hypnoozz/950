# Generated by Django 3.2.11 on 2025-05-14 15:59

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone', models.CharField(blank=True, help_text='用于登录和通知的手机号码', max_length=11, null=True, unique=True, verbose_name='手机号')),
                ('role', models.CharField(choices=[('admin', '管理员'), ('staff', '员工'), ('member', '会员')], default='member', help_text='用户角色：管理员、员工或会员', max_length=10, verbose_name='角色')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/', verbose_name='头像')),
                ('member_id', models.CharField(blank=True, help_text='会员卡号', max_length=20, null=True, unique=True, verbose_name='会员ID')),
                ('birth_date', models.DateField(blank=True, null=True, verbose_name='出生日期')),
                ('gender', models.CharField(blank=True, choices=[('male', '男'), ('female', '女'), ('other', '其他')], max_length=10, null=True, verbose_name='性别')),
                ('address', models.TextField(blank=True, null=True, verbose_name='地址')),
                ('membership_start', models.DateField(blank=True, null=True, verbose_name='会员开始日期')),
                ('membership_end', models.DateField(blank=True, null=True, verbose_name='会员结束日期')),
                ('membership_type', models.CharField(blank=True, choices=[('monthly', '月卡'), ('quarterly', '季卡'), ('yearly', '年卡')], max_length=20, null=True, verbose_name='会员类型')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '用户',
                'verbose_name_plural': '用户',
                'db_table': 'gym_user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('height', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='身高(cm)')),
                ('weight', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='体重(kg)')),
                ('health_condition', models.TextField(blank=True, help_text='记录用户的健康状况、疾病史或注意事项', null=True, verbose_name='健康状况')),
                ('fitness_goal', models.CharField(blank=True, choices=[('weight_loss', '减肥'), ('muscle_gain', '增肌'), ('fitness', '健身'), ('wellness', '健康'), ('rehabilitation', '康复'), ('other', '其他')], max_length=50, null=True, verbose_name='健身目标')),
                ('fitness_level', models.CharField(blank=True, choices=[('beginner', '初学者'), ('intermediate', '中级'), ('advanced', '高级')], max_length=20, null=True, verbose_name='健身水平')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='备注')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL, verbose_name='用户')),
            ],
            options={
                'verbose_name': '用户健身档案',
                'verbose_name_plural': '用户健身档案',
                'db_table': 'gym_user_profile',
            },
        ),
    ]
